<link rel="stylesheet" href="/css/bulma.min.css" />
<link rel="stylesheet" href="/css/cart.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma-extensions@4.0.0/dist/css/bulma-extensions.min.css" />
<link href='https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,700' rel='stylesheet'>
<link rel="stylesheet" href="https://unpkg.com/bulma-modal-fx/dist/css/modal-fx.min.css" />

<!-- Mapbox GL JS -->
<script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.52.0/mapbox-gl.js'></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"> </script>
<!-- Geocoder plugin -->
<script src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v2.0.1/mapbox-gl-geocoder.js'></script>
<!-- Turf.js plugin -->
<script src='https://npmcdn.com/@turf/turf/turf.min.js'></script>
<script type="text/javascript" src="https://unpkg.com/bulma-modal-fx/dist/js/modal-fx.min.js"></script>
<link href="https://fonts.googleapis.com/css?family=Montserrat" rel="stylesheet">


<style>

.flex-container {
  padding: 0;
  margin: 0;
  list-style: none;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  -webkit-flex-flow: row wrap;
  justify-content: space-around;
}

/* Extra small devices (phones, 600px and down) */
@media only screen and (max-width: 600px) {
  .flex-item {
    padding: 5px;
    width: 90%;
    height: auto;
    margin-top: 10px;
  }
  .flex-container {
    width: 100%;
  }
  .cart-container {
    width: 50%;
  }
  .initial-modal-flex-container {
    width: 100%;
    padding: 0;
    margin: 0;
    list-style: none;
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
    -webkit-flex-flow: column;
    justify-content: space-evenly;
  }
} 

/* Small devices (portrait tablets and large phones, 600px and up) */
@media only screen and (min-width: 600px) {
  .flex-item {
    padding: 5px;
    width: 90%;
    height: auto;
    margin-top: 10px;
  }
  .flex-container {
    width: 70%;
    left: 2%;
    position: relative;
}
  .cart-container {
    width: 50%;
  }
  .initial-modal-flex-container {
    width: 100%;
    padding: 0;
    margin: 0;
    list-style: none;
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
    -webkit-flex-flow: column;
    justify-content: space-evenly;
  }
  .modal-menu-option {
    margin-bottom: 10%;
    font-size: 1.55rem;
    text-align: center;
    border-radius: 8px;
    box-shadow: 5px 6px 22px rgba(155, 155, 155, 0.233328);
    letter-spacing: 0.75rem;
    flex-flow: column;
    flex-direction: column;
    width: 90%;
    padding: 100px;
    left: 5%;
}
} 

/* Medium devices (iPhone X, 768px and up) */
@media only screen and (min-width: 768px) {  
  .flex-item {
    padding: 5px;
    width: 100%;
    height: auto;
    margin-top: 10px;
}
.flex-container {
    width: 70%;
    left: 2%;
    position: relative;
}
  .cart-container {
    width: 30%;
  }
  .initial-modal-flex-container {
    width: 100%;
    padding: 0;
    margin: 0;
    list-style: none;
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
    -webkit-flex-flow: column;
    justify-content: space-evenly;
  }
  .modal-menu-option {
    margin-bottom: 10%;
    font-size: 1.55rem;
    text-align: center;
    border-radius: 8px;
    box-shadow: 5px 6px 22px rgba(155, 155, 155, 0.233328);
    letter-spacing: 0.75rem;
    flex-flow: column;
    flex-direction: column;
    width: 90%;
    padding: 100px;
    left: 5%;
}
} 

/* Large devices (laptops/desktops, 992px and up) */
@media only screen and (min-width: 992px) {
  .flex-item {
    padding: 5px;
    width: 33%%;
    height: auto;
    margin-top: 10px;
  }
  .flex-container {
    width: 70%;
  }
  .cart-container {
    width: 30%;
  }
  .initial-modal-flex-container {
    width: 100%;
    padding: 0;
    margin: 0;
    list-style: none;
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
    -webkit-flex-flow: row;
    justify-content: space-evenly;
  }
  .modal-menu-option {
    padding: 200px;
  }
} 

/* Extra large devices (large laptops and desktops, 1200px and up) */
@media only screen and (min-width: 1200px) {
  .flex-item {
    padding: 5px;
    width: 33%;
    height: auto;
    margin-top: 10px;
  }
  .flex-container {
    width: 70%;
  }
  .cart-container {
    width: 30%;
  }
  .initial-modal-flex-container {
    width: 100%;
    padding: 0;
    margin: 0;
    list-style: none;
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
    -webkit-flex-flow: row;
    justify-content: space-evenly;
  }
  .modal-menu-option {
    padding: 200px;
  }
}

a.more-info {
    position: relative;
    font-size: 3rem;
    bottom: -72px;
    right: -35%;
}
div#item-quantity {
    border-radius: 50%;
    width: 35px;
    height: 35px;
    text-align: center;
    padding-top: 15%;
    background: white;
    box-shadow: 1px 1px 1px 1px gainsboro;
    pointer-events: none;
}
img.cart-control {
  height: 35px;
  width: 35px;
}
.item-quantity {
    padding-top: 10px;
    padding-bottom: 10px;
}

  .fulfillment-label {
    border-right: 1px solid black;
    padding: 10px;
  }
  .fulfillment-options {
    display: flex;
    padding-bottom: 20px;
  }
  .fulfillment-option {
    border-right: 20px solid transparent;
  }
  .wrapper {
    display: flex;
  }

  .card-image {
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
  }


  p.title.is-6 {
    align-self: baseline;
}

  .item-card {
    width: 30%;
    background-color: white;
    border-radius: 10px;
    box-shadow: 2px 2px 2px 0px gainsboro;
    border: .25px solid black;
}

.columns {
  height: 100%
}

html {
  background-color: #f2f2f2;

}
body {
  color: #444749;
  font-family: Montserrat;
  background-color: #f2f2f2;
  color: #444749;
  height: 100%;
  /* font-style: normal;
  font-weight: normal;
  line-height: normal;


  mix-blend-mode: normal;
  opacity: 0.87; */
}
  /*Codepen only above this line*/
  .box {
    width: 100%;
    height: 100%;
    padding: 2rem;
  }
  .modal-content {
    width: 800px;
    max-height: 750px;
    overflow: hidden;
  }
  .modal-close {
    position: relative;
    left: 0;
    top: 0;
    z-index: 99;
  }
  .close-delivery {
    position: absolute;
    left: 20px;
    top: 20px;
    z-index: 99;
  }

  .modal-close:hover {
    background-color: red;
  }

  .modal-heading {
    font-size: 2rem;
    text-align: center;
  }

  .modal-subheading {
    text-align: center;
    font-size: 1.5rem;
    padding-bottom: 2rem;
  }

  .modal-menu-option {
    font-size: 1.55rem;
    text-align: center;
    border-radius: 8px;
    box-shadow: 5px 6px 22px rgba(155, 155, 155, 0.233328);
    letter-spacing: 0.75rem;
    flex-flow: column;
    flex-direction: column;
    padding: 200px;
}
  .initial-modal {
    min-height: 300px;
    /*   position: relative;
    left:10px;
    padding-bottom: 200px;
  */
  }
  .store-modal {
    background-color: white;

  }
  .delivery-modal {
    max-width: 500px;
  }


  h1 {
    font-size: 22px;
    margin: 0;
    font-weight: 400;
    line-height: 20px;
    padding: 20px 2px;
  }

  a {
    color: #404040;
    text-decoration: none;
  }

  a:hover {
    color: #101010;
  }

  .heading {
    left: 20%;
    position: relative;
    top: 5px;
    background: #fff;
    border-bottom: 1px solid #eee;
    min-height: 60px;
    line-height: 60px;
    padding: 0 10px;
    color: #fff;
  }

  .listings {
    height: 100%;
    overflow: auto;
    padding-bottom: 60px;
  }

  .listings .item {
    display: block;
    border-bottom: 1px solid #eee;
    padding: 10px;
    text-decoration: none;
  }

  .listings .item:last-child {
    border-bottom: none;
  }
  .listings .item .title {
    display: block;
    color: #00853e;
    font-weight: 700;
  }

  .listings .item .title small {
    font-weight: 400;
  }
  .listings .item.active .title,
  .listings .item .title:hover {
    color: #8cc63f;
  }
  .listings .item.active {
    background-color: #f8f8f8;
  }
  ::-webkit-scrollbar {
    width: 3px;
    height: 3px;
    border-left: 0;
    background: rgba(0, 0, 0, 0.1);
  }
  ::-webkit-scrollbar-track {
    background: none;
  }
  ::-webkit-scrollbar-thumb {
    background: #00853e;
    border-radius: 0;
  }



  .clearfix {
    display: block;
  }
  .clearfix:after {
    content: ".";
    display: block;
    height: 0;
    clear: both;
    visibility: hidden;
  }

  .title {
    font-size: 20px;
  }

  .columns.is-full {
    width: 100%;
  }

  .modal-heading {
    font-style: normal;
    font-weight: normal;
    line-height: normal;
    font-size: 28px;
    text-align: center;
    letter-spacing: 2.33333px;

    color: #444749;
  }

  nav {
    height: 100px;
  }

  .item {
    padding: 10px;
  }

  .modal-footing {
    position: relative;
    font-size: 28px;
    text-align: center;
    letter-spacing: 2.33333px;
    width: 394px;
    text-transform: uppercase;
    padding-top: 20px;
    }
    .modal.is-active {
    position: fixed;
    top: 100px;
}

.navbar-item img {
    max-height: 150px;
    top: 10px;
    position: relative;
}
.modal-background {
  background-color: #F2F2F2 !important;
}

.list-item {
  font-family: Montserrat;
font-style: normal;
font-weight: normal;
line-height: normal;
font-size: 22px;
letter-spacing: 1.83333px;
text-transform: uppercase;

color: #444749;

mix-blend-mode: normal;
opacity: 0.87;
}
.list-item.active {
    background: #aad0ae;
    color: white;
}

.input {
    border: none;
    font-size: 1.25rem;
    text-align: left;
}

::-moz-placeholder {
  color: black !important;
}
::-webkit-input-placeholder {
  color: black !important;
}

img.filter-icon {
    position: relative;
    top: 40px;
}
.category-divider-primary {
    border: 3px solid #aad0ae;
}
.category-divider-breakfast {
  border: 3px solid #f7e393;
}
.category-divider-elite {
  border: 3px solid #d86a6a;
}

.checkout-prompt-1 {
  float: right;
    /* display: flex;
    justify-content: flex-end; */
}

.checkout-button {
    width: 50%;
    font-size: 1.25em;
    align-self: center;
    margin-top: 20px;
}
.checkout-button:hover {
  background-color: #f2f2f2 !important;
  color: #569e7f !important;
  border: 1px solid #569e7f !important;
}

.disabled, .disabled:hover {
    background: #aad0ae59 !important;
    color: white !important;
    border: none !important;
    cursor: not-allowed;
    
}

.card-content {
    background-color: white;
    border-bottom-right-radius: 10px;
    padding: 1.5rem;
    border-bottom-left-radius: 10px;
    box-shadow: 2px 2px 7px 2px gainsboro;
    min-height: 125px;
}
</style>
<body>
<nav class="nav has-background-primary">
    <div class="navbar-brand">
        <a class="navbar-item" href="https://bulma.io">
          <img src="/images/logo.png" width="103" height="60">
        </a>
    
        <a role="button" class="navbar-burger burger" aria-label="menu" aria-expanded="false" data-target="navMenu">
          <span aria-hidden="true"></span>
          <span aria-hidden="true"></span>
          <span aria-hidden="true"></span>
        </a>
      </div>


  <div id="sessionData"></div>

</nav>
<nav class="nav" style="padding:20px;">
    <div class="fulfillment-options">
        <div class="fulfillment-option">
      <a id="pickupRadio">
        Pickup 
        <img src="/images/pencil-icon.png" />
    
      </a>
        </div>
        <div class="fulfillment-option has-border-left">
      <a id="deliveryRadio">
          Delivery
          <img src="/images/pencil-icon.png" />
    
      </a>
    </div>
    <div class="categories">
        CATEGORIES - 
        @each(category in categories)
           <a class="" href="/items/category/{{category.id}}">{{category.desc}}
           </a>
         @endeach
    </div>
    </div>

    <!--<a class="button is-info" href="/menu/all">All</a>

  <a class="button is-danger" href="/cart/clear">Clear Cart</a>
  <a class="button is-primary" href="#" id="showCart" onclick="showCartmenu()">View Cart</a>-->

</nav>
<ul class="wrapper">
@!include('menu.items-container')
<!--is-hidden-tablet-->
  <ul class="cart-container" id="cart">
    
  </ul>
</ul>
@!include('auth.register')
@!include('Modals.initial')
@!include('Modals.pickupLocations')
@!include('Modals.deliveryAddress')
@!include('Modals.itemCard')

</body>
  <script src="/js/jquery-2.2.4.min.js"></script>
  <script src="/js/product-card.js"></script>
  <script>
    $(document).ready(function(){
      $('.modal-close').on('click', function(){
  $('.modal').removeClass('is-active')
})

    })
    </script>

  <script>
    // function signupSubmit() {
    //   $('#register-form').submit()
    // }

  var total = 0
  for (var i = 0; i < 50; i++) {
    var price = $('#subtotal-' + i).text()
    price = parseFloat(price.replace('$', ''))
    if (price) {
      total += price
    }
  
    // $('#cartTotal').text('Cart Total: $' + total)
  }
  var cartItems = []



  window.onscroll = function() {myFunction()};
  
  // Get the navbar
  var navbar = document.getElementById("cart");
  
  // Get the offset position of the navbar
  var sticky = navbar.offsetTop;
  
  // Add the sticky class to the navbar when you reach its scroll position. Remove "sticky" when you leave the scroll position
  function myFunction() {
    // var target = $(".nav");
    // var x = target.position();
    // console.log("Top: " + x.top + " Left: " + x.left);
    // if (window.pageYOffset >= sticky) {
    //   navbar.classList.add("sticky")
    // } else {
    //   navbar.classList.remove("sticky");
    // }
  }
  
  function launchModal(id) {
    if ($('#modal-'+ id + '').hasClass('is-active')) {
      $('#modal-'+ id + '').removeClass('is-active')
    } else {
      $('#modal-'+ id + '').addClass('is-active')
  
    }
  }
  function closeModal() {
    if($('.modal').hasClass('is-active')) {
      $('.modal').removeClass('is-active')
    }
  }
  $('.modal-background').click(function() {
    closeModal()
  });

  
  function showCartmenu() {
    var cart = $('#cart')
    var items = $('#items-column')
    var item = $('.item-column')
  
  
    if (cart.hasClass('is-hidden-mobile') || cart.hasClass('is-hidden-tablet')) {
      // Show the cart div and make it half screen
      cart.addClass('cart-mobile')
      cart.removeClass('is-hidden-mobile').fadeIn()
      cart.removeClass('is-hidden-tablet').fadeIn()
      items.removeClass('is-full-mobile')
      items.removeClass('is-full-tablet')
      items.addClass('is-two-thirds-mobile')
      items.addClass('is-two-thirds-tablet')
  
  
    } else {
      // hide the cart div
      cart.addClass('is-hidden-mobile').fadeIn()
      cart.addClass('is-hidden-tablet').fadeIn()
      cart.addClass('is-hidden-mobile').fadeIn()
      cart.addClass('is-hidden-tablet').fadeIn()
      items.addClass('is-full-mobile')
      items.addClass('is-full-tablet')
      items.removeClass('is-two-thirds-mobile')
      items.removeClass('is-two-thirds-tablet')
  
  
    }
  
  }


$(".modal-close").click(function() {
  $("[class*='is-active']").removeClass("is-active");
});

var prefs = {};
var stores = {
    type: "FeatureCollection",
    features: [
      {
        type: "Feature",
        geometry: {
          type: "Point",
          coordinates: ["-85.3171557", "35.0691112"]
        },
        properties: {
          phoneFormatted: "(423) 555-5555",
          phone: "4235555555",
          address: "601 Cherokee Blvd",
          postalCode: 37405,
          state: "TN",
          city: "Chattanooga",
          closing: "20:00",
          desc: "Vibrant Meals Kitchen",
          storeId: 1
        }
      },
      {
        type: "Feature",
        geometry: {
          type: "Point",
          coordinates: ["-85.3106732", "35.0641196"]
        },
        properties: {
          phoneFormatted: "(423) 555-5555",
          phone: "4235555555",
          address: "125 Cherokee Blvd",
          postalCode: 37405,
          state: "TN",
          city: "Chattanooga",
          closing: "20:00",
          desc: "Chattanooga Functional Fitness",
          storeId: 2
        }
      },
      {
        type: "Feature",
        geometry: {
          type: "Point",
          coordinates: ["-85.31406600000003", "35.0389277"]
        },
        properties: {
          phoneFormatted: "(423) 555-5555",
          phone: "4235555555",
          address: "525 West Main Street",
          postalCode: 37402,
          state: "TN",
          city: "Chattanooga",
          closing: "20:00",
          desc: "Kyle House Fitness",
          storeId: 3
        }
      },
      {
        type: "Feature",
        geometry: {
          type: "Point",
          coordinates: ["-84.76723400000003", "35.134262"]
        },
        properties: {
          phoneFormatted: "(423) 555-5555",
          phone: "4235555555",
          address: "5806 Waterlevel Highway",
          postalCode: 37323,
          state: "TN",
          city: "Cleveland",
          closing: "20:00",
          desc: "Crossfit Anistemi",
          storeId: 4
        }
      },
      {
        type: "Feature",
        geometry: {
          type: "Point",
          coordinates: ["-84.8766215", "35.157391"]
        },
        properties: {
          phoneFormatted: "(423) 555-5555",
          phone: "4235555555",
          address: "282 Church St SE",
          postalCode: 37311,
          state: "TN",
          city: "Cleveland",
          closing: "20:00",
          desc: "Body By Hannah",
          storeId: 5
        }
      }
    ]
  };

$("#pickup, #pickupRadio").click(function() {
  localStorage.setItem("fulfillment_method", "pickup")

  $("#modal-pickup").addClass("is-active")


  mapboxgl.accessToken =
    "pk.eyJ1IjoiZXhhbXBsZXMiLCJhIjoiY2lqbmpqazdlMDBsdnRva284cWd3bm11byJ9.V6Hg2oYJwMAxeoR9GEzkAA";

    // Initialize the list
    // buildLocationList(stores);


    var cords = document.getElementById("cords").value;
    var cord = cords.split(",");

    var options = {
      units: "miles"
    };
    var searchResult = {"type":"Point","coordinates":[-85.3068,35.0292]}
    stores.features.forEach(function(store) {
      Object.defineProperty(store.properties, "distance", {
        value: turf.distance(searchResult, store.geometry, options),
        writable: true,
        enumerable: true,
        configurable: true
      });
    });
    stores.features.sort(function(a, b) {
      if (a.properties.distance > b.properties.distance) {
        return 1;
      }
      if (a.properties.distance < b.properties.distance) {
        return -1;
      }
      // a must be equal to b
      return 0;
    });
    var listings = document.getElementById("listings");
    while (listings.firstChild) {
      listings.removeChild(listings.firstChild);
    }
    buildLocationList(stores);

    function sortLonLat(storeIdentifier) {
      var lats = [
        stores.features[storeIdentifier].geometry.coordinates[1],
        searchResult.coordinates[1]
      ];
      var lons = [
        stores.features[storeIdentifier].geometry.coordinates[0],
        searchResult.coordinates[0]
      ];
      var sortedLons = lons.sort(function(a, b) {
        if (a > b) {
          return 1;
        }
        if (a.distance < b.distance) {
          return -1;
        }
        return 0;
      });
      var sortedLats = lats.sort(function(a, b) {
        if (a > b) {
          return 1;
        }
        if (a.distance < b.distance) {
          return -1;
        }
        return 0;
      });

    }
    sortLonLat(0);
  // This is where your interactions with the symbol layer used to be
  // Now you have interactions with DOM markers instead




  function buildLocationList(data) {
    console.log('hello')
    for (i = 0; i < data.features.length; i++) {
      var currentFeature = data.features[i];
      var prop = currentFeature.properties;
      var listings = document.getElementById("listings");
      var listing = listings.appendChild(document.createElement("div"));
      listing.classList.add("listing-item")
      console.log(prop)
      var miles = prop.distance
      if (localStorage.pickupLocation) {
        var pickupLocation = JSON.parse(localStorage.pickupLocation)
          if (stores.features[i].properties.storeId != pickupLocation.storeId && miles) {
          listing.innerHTML = "<div class='list-item' data-storeId='"+i+"' data-store='"+prop.desc+"'>"+prop.desc+"<span class='store-hours is-pulled-right'>OPEN TILL "+formatDate(prop.closing)+"</span><br />"+prop.address+" <span class='miles is-pulled-right'><strong>"+ miles.toFixed(1) +"</strong> miles away</span></div>"
        } else {
          listing.innerHTML = "<div class='list-item active' data-storeId='"+i+"' data-store='"+prop.desc+"'>"+prop.desc+"<span class='store-hours is-pulled-right'>OPEN TILL "+formatDate(prop.closing)+"</span><br />"+prop.address+" <span class='miles is-pulled-right'><strong>"+ miles.toFixed(1) +"</strong> miles away</span></div>"

        }
      } else {

          listing.innerHTML = "<div class='list-item' data-storeId='"+i+"' data-store='"+prop.desc+"'>"+prop.desc+"<span class='store-hours is-pulled-right'>OPEN TILL "+formatDate(prop.closing)+"</span><br />"+prop.address+" <span class='miles is-pulled-right'><strong>"+ miles.toFixed(1) +"</strong> miles away</span></div>"

      }


    }
  }

  $(".list-item").on('click', function(){
    $(".list-item").removeClass("active")
    $(this).addClass("active")
    var st = ($(this).data())
    var myStore = {}
    myStore.id = st.storeid
    myStore.name = st.store
    localStorage.myStore = JSON.stringify(myStore)
    $('.modal').removeClass("is-active")

    $('#pickupRadio').html('<p class="underline">Pickup from<img src="/images/pencil-icon.png" /><br /> ' + st.store )
    localStorage.pickupLocation = JSON.stringify(stores.features[st.storeid].properties)


  })

  $("#modal-initial-click").removeClass("is-active");
  $("#modal-pickup").addClass("is-active");
})

$('#delivery').click(function(){
  localStorage.setItem("fulfillment_method", "delivery")
  $("#modal-initial-click").removeClass("is-active");
  $("#modal-delivery").removeClass("is-active")
})




function deliveryForm() {
    localStorage.setItem("fulfillment_method", "delivery")
    $("#modal-initial-click").removeClass("is-active")
    $('#modal-delivery').addClass("is-active")
  
  var stores = {
    type: "FeatureCollection",
    features: [
      {
        type: "Feature",
        geometry: {
          type: "Point",
          coordinates: ["-85.3171557", "35.0691112"]
        },
        properties: {
          phoneFormatted: "(423) 555-5555",
          phone: "4235555555",
          address: "601 Cherokee Blvd",
          postalCode: 37405,
          state: "TN",
          city: "Chattanooga",
          closing: "20:00",
          desc: "Vibrant Meals Kitchen",
          storeId: 1
        }
      }
    ]
  };
  // document.getElementById("modal-delivery").classList.remove("is-active");

    sessionStorage.setItem("fulfillment_method", "delivery")
  
  // This will let you use the .remove() function later on

  /* For deliveries, we want to add an autocomplete function.
  *
  * We can do this using the geocoder.  Basically, on page load
  * we can create an empty array and as a user fills in the fields,
  * we can add to this array and also pass it to the geocoder
  * setInput() function.
  *
  */


  var custAddr = {};

  return
  $("#modal-delivery").addClass("is-active")
  // This will let you use the .remove() function later on
  if (!("remove" in Element.prototype)) {
    Element.prototype.remove = function() {
      if (this.parentNode) {
        this.parentNode.removeChild(this);
      }
    };
  }

  mapboxgl.accessToken =
    "pk.eyJ1IjoiZXhhbXBsZXMiLCJhIjoiY2lqbmpqazdlMDBsdnRva284cWd3bm11byJ9.V6Hg2oYJwMAxeoR9GEzkAA";
  // This adds the map
  var map = new mapboxgl.Map({
    // container id specified in the HTML
    container: "map",
    // style URL
    style: "mapbox://styles/mapbox/light-v10",
    // initial position in [long, lat] format
    center: [-85.3171557, 35.0691112],
    // initial zoom
    zoom: 13
  });
  // This adds the data to the map
  map.on("load", function(e) {
    jQuery(function($) {
    $("#address-input").on("keyup", function() {
      custAddr.street = $(this).val();
      geocoder.query(custAddr.street);
    });
    $("#city").on("keyup", function() {
      custAddr.city = $(this).val();
      geocoder.query(custAddr.street + "," + custAddr.city);
      geocoder.result();
    });
    $("#state").on("keyup", function() {
      custAddr.state = $(this).val();
      geocoder.query(
        custAddr.street + "," + custAddr.city,
        +"," + custAddr.state
      );
    });
  });

    // This is where your '.addLayer()' used to be, instead add only the source without styling a layer

    map.addSource("places", {
      type: "geojson",
      data: stores
    });
    // Initialize the list
    buildLocationList(stores);
    geocoder = new MapboxGeocoder({
      accessToken: mapboxgl.accessToken,
      proximity: {
        latitude: -85.30968009999998,
        longitude: 35.0456297
      }
    });
    document.getElementById("geocoder").appendChild(geocoder.onAdd(map));
    // Example of setting an executing a search query programaticall
    // geocoder.query("3530 broad street")

    map.addSource("single-point", {
      type: "geojson",
      data: {
        type: "FeatureCollection",
        features: [] // Notice that initially there are no features
      }
    });
    map.addLayer({
      id: "point",
      source: "single-point",
      type: "circle",
      paint: {
        "circle-radius": 10,
        "circle-color": "#007cbf",
        "circle-stroke-width": 3,
        "circle-stroke-color": "#fff"
      }
    });

    geocoder.on("loading", function(ev) {
      // geocoder.setInput("3530 broad street")
    });
    geocoder.on("result", function(ev) {
      
      // if ( $('.suggestions').children().length == 0 ) {
      //   var userAddr = ev.result.place_name.split(",");
      //   for (var i = 0; i < userAddr.length; i++) {
      //     userAddr[i] = userAddr[i].trim()

      //   $('#address-input').val(userAddr[0])
      //   $('#city').val(userAddr[1])
      //   $('#state').val(userAddr[2].split(' ')[0])
      //   $('#postCode').val(userAddr[2].split(' ')[1])
      //   }
      // }
      // alert(JSON.stringify(ev.result.place_name))
      var userAddr = ev.result.place_name.split(",");
      var prefs = {}
      prefs.userAddress = {
        street: userAddr[0],
        city: userAddr[1],
        state: userAddr[2]
      };
      localStorage.setItem("deliveryAddress", JSON.stringify(prefs))


      // [-85.3171557,35.0691112]
      var searchResult = ev.result.geometry;
      map.getSource("single-point").setData(searchResult);
      var options = {
        units: "miles"
      };
      stores.features.forEach(function(store) {
        Object.defineProperty(store.properties, "distance", {
          value: turf.distance(searchResult, store.geometry, options),
          writable: true,
          enumerable: true,
          configurable: true
        });
      });
      stores.features.sort(function(a, b) {
        if (a.properties.distance > b.properties.distance) {
          return 1;
        }
        if (a.properties.distance < b.properties.distance) {
          return -1;
        }
        // a must be equal to b
        return 0;
      });
      var listings = document.getElementById("listings");
      while (listings.firstChild) {
        listings.removeChild(listings.firstChild);
      }
      buildLocationList(stores);

      function sortLonLat(storeIdentifier) {
        var lats = [
          stores.features[storeIdentifier].geometry.coordinates[1],
          searchResult.coordinates[1]
        ];
        var lons = [
          stores.features[storeIdentifier].geometry.coordinates[0],
          searchResult.coordinates[0]
        ];
        var sortedLons = lons.sort(function(a, b) {
          if (a > b) {
            return 1;
          }
          if (a.distance < b.distance) {
            return -1;
          }
          return 0;
        });
        var sortedLats = lats.sort(function(a, b) {
          if (a > b) {
            return 1;
          }
          if (a.distance < b.distance) {
            return -1;
          }
          return 0;
        });

      }
      sortLonLat(0);
    });
    // This is where your interactions with the symbol layer used to be
    // Now you have interactions with DOM markers instead
    stores.features.forEach(function(marker, i) {
      // Create an img element for the marker
      var el = document.createElement("div");
      el.id = "set-store-id-" + i;
      el.className = "switch";
      // Add markers to the map at all points
      // new mapboxgl.Marker(el, {offset: [0, -23]})
      //     .setLngLat(marker.geometry.coordinates)
      //     .addTo(map);
      el.addEventListener("click", function(e) {
        // 1. Fly to the point
        flyToStore(marker);
        // 2. Close all other popups and display popup for clicked store
        createPopUp(marker);
        // 3. Highlight listing in sidebar (and remove highlight for all other listings)
        var activeItem = document.getElementsByClassName("active");
        e.stopPropagation();
        if (activeItem[0]) {
          activeItem[0].classList.remove("active");
        }
        var listing = document.getElementById("listing-" + i);
        listing.classList.add("active");
      });
    });

    function flyToStore(currentFeature) {
      prefs.myStore = currentFeature.properties;
      localStorage.setItem("deliveryDistance", currentFeature.properties.mileage)
      localStorage.setItem("myStore", JSON.stringify(currentFeature.properties))
      localStorage.setItem("fulfillment_method", "pickup")

      document.getElementById("modal-delivery").classList.remove("is-active");
      var myNode = document.getElementById("modal-delivery");
      while (myNode.firstChild) {
        myNode.removeChild(myNode.firstChild);
      }
      map.flyTo({
        center: currentFeature.geometry.coordinates,
        zoom: 15
      });
    }

    function buildLocationList(data) {
      for (i = 0; i < data.features.length; i++) {
        var currentFeature = data.features[i];
        var prop = currentFeature.properties;
        var listings = document.getElementById("listings");
        var listing = listings.appendChild(document.createElement("div"));
        listing.className = "item";
        listing.id = "listing-" + i;
        var link = listing.appendChild(document.createElement("a"));
        link.href = "#";
        link.className = "title";
        link.dataPosition = i;
        link.innerHTML = prop.desc;
        var details = listing.appendChild(document.createElement("div"));
        details.innerHTML =
          prop.address +
          ", " +
          prop.city +
          " Open till - " +
          formatDate(currentFeature.properties.closing);
        details.innerHTML +=
          '<div class="field is-pulled-right">\
  <input id="set-store-id-' +
          currentFeature.properties.storeId +
          '" type="checkbox" name="store-' +
          currentFeature.properties.storeId +
          '" class="switch is-large">\
  <label for="set-store-id-' +
          currentFeature.properties.storeId +
          '"></label>\
</div>';
        if (prop.distance) {

          var roundedDistance = Math.round(prop.distance * 100) / 100;
          localStorage.setItem("deliveryRange", roundedDistance)
          if (roundedDistance > 9) {
            console.log("address is more than 9 miles away");
          }
          details.innerHTML +=
            "<p><strong>" + roundedDistance + " miles away</strong></p>";
        }
        link.addEventListener("click", function(e) {
          // Update the currentFeature to the store associated with the clicked link
          var clickedListing = data.features[this.dataPosition];
          document
            .getElementById("set-store-id-" + clickedListing.properties.storeId)
            .click();
          // 1. Fly to the point
          flyToStore(clickedListing);
          // 2. Close all other popups and display popup for clicked store
          createPopUp(clickedListing);
          // 3. Highlight listing in sidebar (and remove highlight for all other listings)
          var activeItem = document.getElementsByClassName("active");
          if (activeItem[0]) {
            activeItem[0].classList.remove("active");
          }
          this.parentNode.classList.add("active");
        });
      }
    }
  });

  $("#modal-initial-click").removeClass("is-active");
  $("#modal-delivery").addClass("is-active");
}

function formatDate(date) {
  var time = date.split(":");
  var hh = parseInt(time[0]);
  var m = parseInt(time[1]);
  var h = hh;
  if (h >= 12) {
    h = hh - 12;
    dd = "PM";
  }
  if (h == 0) {
    h = 12;
  }

  m = m < 10 ? "0" + m : m;

  /* if you want 2 digit hours: */
  // h = h<10?"0"+h:h;
  var timeStr = h + ":" + m + "" + dd;
  return timeStr;
}

function getLocation() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(showPosition);
  } else {
    x.innerHTML = "Geolocation is not supported by this browser.";
  }
}
function showPosition(position) {
  var cord = [];
  cord.push(position.coords.longitude);
  cord.push(position.coords.latitude);
  $("#cords").val(cord);
}
$('.checkout-prompt-1').on('click', function(e){
  e.preventDefault()
  e.stopPropagation()
  $('.modal').removeClass('is-active')
  if (localStorage.getItem("custEngageCompleted") != 1) {
      $('#modal-initial-click').addClass('is-active')
      localStorage.setItem("custEngageCompleted", 1);
      var c = JSON.parse(localStorage.cart)
      var item = $(this).data()
      c.push(item)
      localStorage.setItem('cart', JSON.stringify(c))
      updateCartDiv(c)
      return false
    }
    var item = $(this).data()

  // var item = $(this).data()
    var cartItems = JSON.parse(localStorage.cart)
    cartItems.push(item)

    function checkDuplicateInObject(propertyName, inputArray) {
    var seenDuplicate = false,
        testObject = {};
    
    inputArray.map(function(item) {
      var itemPropertyName = item[propertyName]; 
      if (itemPropertyName in testObject) {
        testObject[itemPropertyName].quantity++;
        item.duplicate = true;
        seenDuplicate = true;
      }
      else {
        testObject[itemPropertyName] = item;
        delete item.duplicate;
      }
    });
    
    return cartItems;
  }
  var cart = checkDuplicateInObject('id', cartItems)
  var updatedCart = []
  for (var i = 0; i < cart.length; i++) {
    if (!cart[i].duplicate){
      updatedCart.push(cart[i])
    }
    
  }
    localStorage.setItem('cart', JSON.stringify(updatedCart))
    updateCartDiv(updatedCart)
})


// Checkout button inside modal
  function addToCartFromModal(item){
    item.quantity = 1
    $('.modal').removeClass('is-active')
  if (localStorage.getItem("custEngageCompleted") != 1) {
      $('#modal-initial-click').addClass('is-active')
      localStorage.setItem("custEngageCompleted", 1);
      var c = JSON.parse(localStorage.cart)
      // var item = $(this).data()
      c.push(item)
      localStorage.setItem('cart', JSON.stringify(c))
      updateCartDiv(c)
      return false
    }
    // var item = $(this).data()

  // var item = $(this).data()
    var cartItems = JSON.parse(localStorage.cart)
    cartItems.push(item)

    function checkDuplicateInObject(propertyName, inputArray) {
    var seenDuplicate = false,
        testObject = {};
    
    inputArray.map(function(item) {
      var itemPropertyName = item[propertyName]; 
      if (itemPropertyName in testObject) {
        testObject[itemPropertyName].quantity++;
        item.duplicate = true;
        seenDuplicate = true;
      }
      else {
        testObject[itemPropertyName] = item;
        delete item.duplicate;
      }
    });
    
    return cartItems;
  }
  var cart = checkDuplicateInObject('id', cartItems)
  var updatedCart = []
  for (var i = 0; i < cart.length; i++) {
    if (!cart[i].duplicate){
      updatedCart.push(cart[i])
    }
    
  }
    localStorage.setItem('cart', JSON.stringify(updatedCart))
    updateCartDiv(updatedCart)
}

function updateCartDiv(cartItems) {

  $('#cart').html('')
  var cartCount = 0
  // $('#cart').append('<div id="navMenu" class="navbar-menu"><div class="navbar-end">')

  for (var i = 0; i < cartItems.length; i++) {
    cartCount += cartItems[i].quantity
    localStorage.setItem('cartCount', cartCount)
    var card = '<div class="cart-items"><div class="cart-controls"><a href="#" onclick="addCart('+i+')"><img class="cart-control" src="/images/plus-icon.png"></a><br /><div class="item-quantity"><div id="item-quantity">'+cartItems[i].quantity+'</div></div><a href="#" class="cart-minus" data-id="'+i+'" onclick="subCart('+i+')"><img class="cart-control" src="/images/minus-icon.png"></a></div><img class="cart-image" src="/'+cartItems[i].img_url+'" alt="Placeholder image" /><p class="title is-6">'+cartItems[i].name+'</p></div>'
      $('#cart').append(card)
  }
  $('#cart').append('</div></div>')
  if (localStorage.cartCount < 5) {
    $('#cart').append('<a class="button is-primary tooltip disabled checkout-button" data-tooltip="Please add at least 5 items to cart">Checkout</a>')

  } else if(localStorage.cartCount >= 5) {
    $('#cart').append('<a class="button is-primary checkout-button">Checkout</a>')

  } else if (localStorage.cartCount == 1) {
    $('#cart').append('<div id="alert"><div class="notification is-primary checkout-warning"><button class="delete"></button>Please add at least 5 items to your cart</div></div><a class="button is-primary tooltip disabled checkout-button" data-tooltip="Please add at least 5 items to cart">Checkout</a>')
  } else if (localStorage.cartCount == 0) {
    $('#cart').html('a')
  }
}
//Initializd our cart if one is not yet set
if (!localStorage.cart) {
  localStorage.setItem('cart','[]')
} else {
  var cart = JSON.parse(localStorage.cart)
  updateCartDiv(cart)
}
if (!localStorage.custEngageCompleted) {
  localStorage.setItem('custEngageCompleted', 0)
}

if (!localStorage.cartCount) {
  localStorage.setItem('cartCount', 0)
}

if (!localStorage.fulfillmentMethod && localStorage.myStore) {
  var store = JSON.parse(localStorage.myStore)
  $('#pickupRadio').html('Pickup from <img src="/images/pencil-icon.png" /> <br />' + store.name + '    ')


}
function subCart(id) {
  var cart = JSON.parse(localStorage.cart)
  count = localStorage.cartCount
  count--
  localStorage.setItem('cartCount', count)
  var updatedCart = []
  cart[id].quantity--
  for (var x = 0; x < cart.length; x++) {
    if (cart[x].quantity === 0) {

    } else {
      updatedCart.push(cart[x])
    }
  }
  localStorage.setItem('cart', JSON.stringify(updatedCart))
  updateCartDiv(updatedCart)
}

function addCart(id) {
  var cart = JSON.parse(localStorage.cart)
  var updatedCart = []
  cart[id].quantity++

  localStorage.setItem('cart', JSON.stringify(cart))
  updateCartDiv(cart)
}


$('#pickupRadio').on('click', function(){
$('#modal-pickup').addClass('is-active')
  localStorage.setItem('fulfillment_method', 'pickup')
  localStorage.removeItem('deliveryDistance')
  localStorage.removeItem('userAddr')
})


  </script> 

<script>
  (function() {
        var burger = document.querySelector('.burger');
        var nav = document.querySelector('#'+burger.dataset.target);

        burger.addEventListener('click', function(){
          burger.classList.toggle('is-active');
          nav.classList.toggle('is-active');
        });
      })();

      $('a#deliveryRadio').on('click', function(){
        showCartmenu()
      })

      $('.card-content, .card-image').on('click',function(e){
        e.preventDefault()
        e.stopPropagation()
        $('#modal-item').addClass('is-active')
        var item = $(this).closest('li').data()
        $('.item-card-title').html('<img src="/'+item.img_url+'"/>' + item.name)
        $('.item-card-description').html('<section class="item-description">'+item.desc + '</section>')
        $('.item-card-description').append("<a onclick='addToCartFromModal("+JSON.stringify(item)+")' data-quantity='1' class='is-pulled-right'><img src='/images/cart-icon.png' /></a>")
      })

      $('#pickup').on('mouseover', function(){
        console.log('hello')
        $(this).css('background-color', '#aad0ae')
        $('.pickup-icon').attr('src', '/images/pickup-icon-active.png')
        $(this).find('.modal-footing').css('color', 'white')
      })
      $('#pickup').on('mouseout', function(){
        $(this).css('background-color', 'white')
        $('.pickup-icon').attr('src', '/images/pickup-icon-inactive.png')
        $(this).find('.modal-footing').css('color', '#363636')
      })

      $('#delivery').on('mouseover', function(){
        console.log('hello')
        $(this).css('background-color', '#aad0ae')
        $('.delivery-icon').attr('src', '/images/delivery-icon-active.png')
        $(this).find('.modal-footing').css('color', 'white')
      })
      $('#delivery').on('mouseout', function(){
        $(this).css('background-color', 'white')
        $('.delivery-icon').attr('src', '/images/delivery-icon-inactive.png')
        $(this).find('.modal-footing').css('color', '#363636')
      })

      </script>